//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CARL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CARLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, NUM=19, WS=20;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_equalityExpression = 2, RULE_relationExpression = 3, 
		RULE_binaryExpression = 4, RULE_multExpression = 5, RULE_unaryExpression = 6, 
		RULE_term = 7;
	public static readonly string[] ruleNames = {
		"program", "expression", "equalityExpression", "relationExpression", "binaryExpression", 
		"multExpression", "unaryExpression", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'!'", "'true'", "'false'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CARL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CARLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CARLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CARLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CARLParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			expression();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			equalityExpression();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 20;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 21;
				equalityExpression();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			relationExpression();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				{
				State = 28;
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 29;
				relationExpression();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterRelationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitRelationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			binaryExpression();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) {
				{
				{
				State = 36;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 37;
				binaryExpression();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			multExpression();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__9) {
				{
				{
				State = 44;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__9) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				{
				State = 45;
				multExpression();
				}
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			unaryExpression();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
				{
				{
				State = 52;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 53;
				unaryExpression();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9 || _la==T__13) {
				{
				{
				State = 59;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__13) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(CARLParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICARLListener typedListener = listener as ICARLListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICARLVisitor<TResult> typedVisitor = visitor as ICARLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 14, RULE_term);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				Match(NUM);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70;
				Match(T__16);
				State = 71;
				expression();
				State = 72;
				Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,77,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,2,1,2,1,2,5,
		2,31,8,2,10,2,12,2,34,9,2,1,3,1,3,1,3,5,3,39,8,3,10,3,12,3,42,9,3,1,4,
		1,4,1,4,5,4,47,8,4,10,4,12,4,50,9,4,1,5,1,5,1,5,5,5,55,8,5,10,5,12,5,58,
		9,5,1,6,5,6,61,8,6,10,6,12,6,64,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,75,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,6,1,0,1,2,1,0,3,4,1,0,5,8,
		1,0,9,10,1,0,11,13,2,0,10,10,14,14,77,0,16,1,0,0,0,2,19,1,0,0,0,4,27,1,
		0,0,0,6,35,1,0,0,0,8,43,1,0,0,0,10,51,1,0,0,0,12,62,1,0,0,0,14,74,1,0,
		0,0,16,17,3,2,1,0,17,18,5,0,0,1,18,1,1,0,0,0,19,24,3,4,2,0,20,21,7,0,0,
		0,21,23,3,4,2,0,22,20,1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,
		0,25,3,1,0,0,0,26,24,1,0,0,0,27,32,3,6,3,0,28,29,7,1,0,0,29,31,3,6,3,0,
		30,28,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,5,1,0,0,0,34,
		32,1,0,0,0,35,40,3,8,4,0,36,37,7,2,0,0,37,39,3,8,4,0,38,36,1,0,0,0,39,
		42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,7,1,0,0,0,42,40,1,0,0,0,43,48,
		3,10,5,0,44,45,7,3,0,0,45,47,3,10,5,0,46,44,1,0,0,0,47,50,1,0,0,0,48,46,
		1,0,0,0,48,49,1,0,0,0,49,9,1,0,0,0,50,48,1,0,0,0,51,56,3,12,6,0,52,53,
		7,4,0,0,53,55,3,12,6,0,54,52,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,
		1,0,0,0,57,11,1,0,0,0,58,56,1,0,0,0,59,61,7,5,0,0,60,59,1,0,0,0,61,64,
		1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,66,
		3,14,7,0,66,13,1,0,0,0,67,75,5,19,0,0,68,75,5,15,0,0,69,75,5,16,0,0,70,
		71,5,17,0,0,71,72,3,2,1,0,72,73,5,18,0,0,73,75,1,0,0,0,74,67,1,0,0,0,74,
		68,1,0,0,0,74,69,1,0,0,0,74,70,1,0,0,0,75,15,1,0,0,0,7,24,32,40,48,56,
		62,74
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
